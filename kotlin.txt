1)== по значению 
2)=== по ссылке
3)все числа - в пуле, обертка вешается в случ когда число може быть null -Int?
4)Массивы класс Array.arrayOf(1, 2, 3) создаёт массив [1, 2, 3], arrayOfNulls() может быть использована для создания массива заданного размера, заполненного значениями null.	
Также для создания массива можно использовать фабричную функцию, которая принимает размер массива и функцию
// создаёт массив типа Array<String> со значениями ["0", "1", "4", "9", "16"]
val asc = Array(5, { i -> (i * i).toString() })
Есть след реализации ByteArray, ShortArray, IntArray не наслед от Array!
5) 2-а типа "" - не екранированые и """- экранированые тут можно напилить даже for или любой raw text
6)Строковые шаблоны
val s = "abc"
val str = "$s.length is ${s.length}" // evaluates to "abc.length is 3"
7)Function Usage - Infix notation :
// Define extension to Int
infix fun Int.shl(x: Int): Int {
...
}

// call extension function using infix notation

1 shl 2

// is the same as

1.shl(2)
8) В ф-ци можно задать дефф переменые, а также при вызове мнять порядок указав имена переменых
9) Как быстро вставить массив в лист с помощю *
val a = arrayOf(1, 2, 3)
val list = asList(-1, 0, *a, 4)
10)Ф-ци могут быть одна в одной определны 
fun dfs(graph: Graph) {
  val visited = HashSet<Vertex>()
  fun dfs(current: Vertex) {
    if (!visited.add(current)) return
    for (v in current.neighbors)
      dfs(v)
  }

  dfs(graph.vertices[0])
}
11)Tail recursive functions 
tailrec fun findFixPoint(x: Double = 1.0): Double
        = if (x == Math.cos(x)) x else findFixPoint(Math.cos(x))
TAILREC- когда компилятор встречает его - то опимизирует ф-ию не давая ей выпасть в переполнение стека
12) Лямбда , если не охота писать вход параметр - тожно заменить его на it . 
ints.map(it * 2) 
13)Function Types - если ф-ця принимает на вход другую ф-цю, то у родительской нужно дженерелизировать тип 
fun <T> max(collection: Collection<T>, less: (T, T) -> Boolean): T? {
  var max: T? = null
  for (it in collection)
    if (max == null || less(max, it))
      max = it
  return max
}
14)Lambda Expression Syntax
val sum: (Int, Int) -> Int = { x, y -> x + y }
val sum = { x: Int, y: Int -> x + y }
если один параметр мто можно ерез it :
ints.filter { it > 0 } 
15) Анонимная ф-ця


К Л А С С Ы 
1)Конструктор дефолтный
class Person constructor(firstName: String) {
}
если не нужно конструктору писать модификаторы или он НЕ имеет АНОТАЦИЙ(@Injection.... t.c)
class Person(firstName: String) {
}
в конструкторе нету тела , его альтернативой может быть  init - ф-ия
class Customer(name: String) {
    init {
        logger.info("Customer initialized with value ${name}")
    }
}
***************************************************
Присвоение параметров к-ра локальным полям 

*-class Customer(name: String) {
    val customerKey = name.toUpperCase()
}

*- val as final
class Person(val firstName: String, val lastName: String, var age: Int) {
  // ...
}


|||val - var = не изменяемые - изменяемые параметры|||
2)Кнструктор Второстепеный
class Person(val name: String) {
    constructor(name: String, parent: Person) : this(name) {
        parent.children.add(this)
    }
}

*** можно без дефолтного 

*** by default private type for constructor

*** для jpa и gson....
easy way declarate:
class Customer(val customerName: String = "")

3)Наследование, все классы наслед от Any и имеет только такие методы
equals()
hashCode()
toString()

*** чтобы отнаследоватся нужно после Конструктора или Имени Класса поставить : и указать супер тип
open class Base(p: Int)
class Derived(p: Int) : Base(p)   <--- если есть Primary конструктор - его реализовуют сразуже при обьявлении наследования

Здесь OPEN - противоположное FINAL in JAVA, по дефф в Котлине все классы FINAL

ЕСЛИ НЕТ Primary а есть Secondary - то реализовать его можно при описании Второго ко-ра с помощю слова SUPER

class MyView : View {
    constructor(ctx: Context) : super(ctx) {
    }
    constructor(ctx: Context, attrs: AttributeSet) : super(ctx, attrs) {
    }
}



